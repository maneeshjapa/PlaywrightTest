"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_sequencer_1 = __importDefault(require("@jest/test-sequencer"));
const utils_1 = require("./utils");
const constants_1 = require("./constants");
class CustomSequencer extends test_sequencer_1.default {
    async getTests(tests, config) {
        const { browsers, devices } = config;
        const updatedConfig = { launchType: constants_1.LAUNCH };
        let resultDevices = [];
        const pwTests = [];
        for (const test of tests) {
            for (const browser of browsers) {
                utils_1.checkBrowserEnv(browser);
                const { devices: availableDevices } = utils_1.getPlaywrightInstance(browser);
                if (devices instanceof RegExp) {
                    resultDevices = Object.keys(availableDevices).filter((item) => item.match(devices));
                }
                else {
                    if (devices) {
                        resultDevices = devices;
                    }
                }
                if (resultDevices.length) {
                    resultDevices.forEach((device) => {
                        if (typeof device === 'string') {
                            const availableDeviceNames = Object.keys(availableDevices);
                            utils_1.checkDeviceEnv(device, availableDeviceNames);
                        }
                        pwTests.push(utils_1.getBrowserTest(test, utils_1.deepMerge(config, updatedConfig), browser, null, device));
                    });
                }
                else {
                    pwTests.push(utils_1.getBrowserTest(test, utils_1.deepMerge(config, updatedConfig), browser, null, null));
                }
            }
        }
        return pwTests;
    }
    //@ts-ignore
    async sort(tests) {
        if (process.env.JEST_PLAYWRIGHT_EXPERIMENTAL) {
            const copyTests = Array.from(tests);
            const { rootDir, testEnvironmentOptions } = tests[0].context.config;
            const config = await utils_1.readConfig(rootDir, testEnvironmentOptions[constants_1.CONFIG_ENVIRONMENT_NAME]);
            return this.getTests(copyTests, config);
        }
        return tests;
    }
}
exports.default = CustomSequencer;
